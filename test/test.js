"use strict";
import fs from "fs";
import path from "path";
import glob from "glob";
import { chai, expect } from "chai";
import Woff2Base64Class from "../lib/woff2base64";
import woff2base64 from "../lib/index";

let fonts = {};
let expected = {};
const options = {
  fontFamily: "Roboto"
};

glob.sync("./test/fonts/Roboto/*.{woff,woff2}").forEach(name => {
  fonts[path.basename(name)] = { content: fs.readFileSync(name) };
});

glob.sync("./test/expected/*.css").forEach(name => {
  expected[path.basename(name, ".css")] = fs.readFileSync(name, {
    encoding: "utf-8"
  });
});

describe("woff2base64", function() {
  describe("Woff2Base64 Class", function() {
    it("exists", function() {
      expect(Woff2Base64Class).to.exist;
    });

    it("accepts options", function() {
      const fo = new Woff2Base64Class({}, options);

      expect(fo.opts.fontFamily).to.equal("Roboto");
      expect(fo.opts.banner).to.equal(
        "/* Generated by woff2base64 (https://github.com/fetten/woff2base64) */\n"
      );
    });

    it("gets the font format from a filename", function() {
      const fo = new Woff2Base64Class({}, options);
      let format = fo.getFontFormat("Roboto-Regular.woff");
      expect(format).to.equal("woff");

      format = fo.getFontFormat("Roboto-Bold.woff2");
      expect(format).to.equal("woff2");
    });

    it("gets the font-weight from filename", function() {
      const fo = new Woff2Base64Class({}, options);
      let weight = fo.getFontWeightFromFilename("Roboto-Regular.woff");
      expect(weight).to.equal("normal");

      weight = fo.getFontWeightFromFilename("Roboto-Bold.woff2");
      expect(weight).to.equal("bold");

      weight = fo.getFontWeightFromFilename("Roboto-BlackItalic-900.woff2");
      expect(weight).to.equal("900");
    });

    it("gets the font-style from filename", function() {
      const fo = new Woff2Base64Class({}, options);

      let style = fo.getFontStyleFromFilename("Roboto-Bold.woff2");
      expect(style).to.equal("normal");

      style = fo.getFontStyleFromFilename("Roboto-Italic.woff2");
      expect(style).to.equal("italic");

      style = fo.getFontStyleFromFilename("Roboto-BlackItalic-900.woff2");
      expect(style).to.equal("italic");
    });

    it("converts strings to base64", function() {
      const fo = new Woff2Base64Class({}, options);
      const base64 = fo.stringToBase64("woff is awesome");

      expect(base64).to.equal("d29mZiBpcyBhd2Vzb21l");
    });

    it("gets the MimeType by font format", function() {
      const fo = new Woff2Base64Class({}, options);
      const woffMime = fo.getMimeType("woff");
      const woff2Mime = fo.getMimeType("woff2");

      expect(woffMime).to.equal("application/font-woff");
      expect(woff2Mime).to.equal("application/font-woff2");
    });

    it("gets the font data uri by string", function() {
      const fo = new Woff2Base64Class({}, options);
      const woffUri = fo.getFontDataUri("woff", "woff is awesome");
      const woff2Uri = fo.getFontDataUri("woff2", "woff2 is awesome");

      expect(woffUri).to.equal(
        "data:application/font-woff;charset=utf-8;base64,d29mZiBpcyBhd2Vzb21l"
      );
      expect(woff2Uri).to.equal(
        "data:application/font-woff2;charset=utf-8;base64,d29mZjIgaXMgYXdlc29tZQ=="
      );
    });

    it("gets the font data uri by Buffer", function() {
      const fo = new Woff2Base64Class({}, options);
      const woffUri = fo.getFontDataUri("woff", new Buffer("woff is awesome"));
      const woff2Uri = fo.getFontDataUri(
        "woff2",
        new Buffer("woff2 is awesome")
      );

      expect(woffUri).to.equal(
        "data:application/font-woff;charset=utf-8;base64,d29mZiBpcyBhd2Vzb21l"
      );
      expect(woff2Uri).to.equal(
        "data:application/font-woff2;charset=utf-8;base64,d29mZjIgaXMgYXdlc29tZQ=="
      );
    });

    it("gets the FontFace css string", function() {
      const fo = new Woff2Base64Class({}, options);
      const woffFontFace = fo.getFontFace("Roboto-Bold.woff", "woff", {
        content: "Hello world"
      });
      const woff2FontFace = fo.getFontFace("Roboto-Bold.woff2", "woff2", {
        content: "Hello world"
      });

      expect(woffFontFace).to.equal(
        [
          "@font-face{",
          'font-family:"Roboto";',
          'src:url(data:application/font-woff;charset=utf-8;base64,SGVsbG8gd29ybGQ=) format("woff");',
          "font-weight:bold;",
          "font-style:normal",
          "}"
        ].join("")
      );
      expect(woff2FontFace).to.equal(
        [
          "@font-face{",
          'font-family:"Roboto";',
          'src:url(data:application/font-woff2;charset=utf-8;base64,SGVsbG8gd29ybGQ=) format("woff2");',
          "font-weight:bold;",
          "font-style:normal",
          "}"
        ].join("")
      );
    });

    it("generates an empty font list", function() {
      const fo = new Woff2Base64Class({}, options);
      const result = fo.generate();

      expect(result).to.be.an("object");
      expect(result).to.be.empty;
    });

    it("generates", function() {
      const fo = new Woff2Base64Class(fonts, options);
      const result = fo.generate();

      expect(result).to.be.an("object");
      expect(result).to.have.property("woff");
      expect(result).to.have.property("woff2");
      expect(result.woff).not.to.be.empty;
      expect(result.woff2).not.to.be.empty;

      expect(result.woff).to.equal(expected.woff);
      expect(result.woff2).to.equal(expected.woff2);
    });
  });

  describe("woff2base64 wrapper", function() {
    it("exists", function() {
      expect(woff2base64).to.exist;
    });

    it("generates", function() {
      const result = woff2base64(fonts, options);
      expect(result).to.be.an("object");
      expect(result).to.have.property("woff");
      expect(result).to.have.property("woff2");
      expect(result.woff).not.to.be.empty;
      expect(result.woff2).not.to.be.empty;

      expect(result.woff).to.equal(expected.woff);
      expect(result.woff2).to.equal(expected.woff2);
    });
  });

  describe("Readme example", function() {
    it("generates", function() {
      const example = require("./example");

      if (!fs.existsSync("./test/tmp")) {
        fs.mkdirSync("./test/tmp");
      }
      example();

      const woff = fs.readFileSync("./test/tmp/roboto.woff.css", {
        encoding: "utf-8"
      });

      expect(woff).not.to.be.empty;
      expect(woff).to.equal(expected.woff);

      const woff2 = fs.readFileSync("./test/tmp/roboto.woff2.css", {
        encoding: "utf-8"
      });

      expect(woff2).not.to.be.empty;
      expect(woff2).to.equal(expected.woff2);

      fs.unlinkSync("./test/tmp/roboto.woff.css");
      fs.unlinkSync("./test/tmp/roboto.woff2.css");
      fs.rmdirSync("./test/tmp");
    });
  });
});
