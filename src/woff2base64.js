/**
 * Woff2Base64 class.
 * Generates CSS with woff2 and woff fonts embedded as Base64.
 *
 * @copyright (c) 2017 Marcel Fetten (https://www.fetten-meier.com)
 * @license MIT
 */
'use strict';

import path from 'path';
import _ from 'lodash';

class Woff2Base64 {
  mimeTypes = {
    woff: 'application/font-woff',
    woff2: 'application/font-woff2'
  };

  fontWeights = [
    '100',
    '200',
    '300',
    '400',
    '500',
    '600',
    '700',
    '800',
    '900',
    'bolder',
    'bold',
    'lighter',
    'normal',
    'regular' // gets converted to `normal`
  ];

  fontStyles = [
    'italic',
    'oblique',
    'normal'
  ];

  defaultOpts = {
    fontFamily: null,
    fontFaceTemplate: [
      '@font-face{',
      'font-family:"<%=family%>";',
      'src:url(<%=uri%>) format("<%=format%>");',
      'font-weight:<%=weight%>;',
      'font-style:<%=style%>',
      '}'
    ].join(''),
    fontUriTemplate: 'data:<%=mime%>;charset=utf-8;base64,<%=base64%>',
    banner: '/* Generated by woff2base64 (https://github.com/fetten/woff2base64) */\n'
  };

  /**
   * Class Constructor
   *
   * @param {object} fonts Object of fonts. Filename as key, value can be a string or Buffer with the file content or an object.
   * @param {object} opts Options.
   */
  constructor(fonts, opts) {
    this.fonts = fonts;
    this.opts = {};

    _.extend(this.opts, this.defaultOpts, opts);
    this.opts.fontFaceTemplate = _.template(this.opts.fontFaceTemplate);
    this.opts.fontUriTemplate = _.template(this.opts.fontUriTemplate);

    if (!this.opts.fontFamily || typeof this.opts.fontFamily !== 'string') {
      throw new Error('No valid fontFamily given in options. Please provide a fontFamily (string).');
    }

    for (let filename in this.fonts) {
      if (!this.fonts.hasOwnProperty(filename)) {
        continue;
      }

      // font content can be passed as string or Buffer - convert it to object
      if (typeof (this.fonts[filename]) === 'string' || this.fonts[filename] instanceof Buffer) {
        this.fonts[filename] = {
          content: this.fonts[filename]
        };
      }
    }
  }

  /**
   * Generate
   * @return {object} Object with font-formats (e.g. `woff2` and `woff`) as keys and the css property as value.
   */
  generate = () => {
    let resultObject = this.getResultObject();
    resultObject = _.mapValues(resultObject, this.prependBannerAndJoinLines);

    return resultObject;
  };

  /**
   * Get the result object
   *
   * @returns {Object} Object with font-formats (e.g. `woff` and `woff2`) as keys and the css property as value.
   */
  getResultObject = () => {
    let formats = {};

    for (let filename in this.fonts) {
      if (!this.fonts.hasOwnProperty(filename)) {
        continue;
      }

      // skip any other filename than .woff or woff2
      if (!/.woff2?$/i.test(filename)) {
        continue;
      }

      let format = this.getFontFormat(filename);
      if (!formats[format]) {
        formats[format] = [];
      }

      let fontface = this.getFontFace(filename, format, this.fonts[filename]);
      formats[format].push(fontface);
    }

    return formats;
  };

  /**
   * Prepend the banner from options and join single lines with line-break
   *
   * @param lines
   * @returns {string}
   */
  prependBannerAndJoinLines = (lines) => {
    return this.opts.banner + lines.join('\n');
  };

  /**
   * Get the font-face css property from a given font
   *
   * @param {string} filename The font filename
   * @param {string} format The font format (woff2 or woff)
   * @param {object} font The font object
   * @returns {string} The css font-face property string
   */
  getFontFace = (filename, format, font) => {

    return this.opts.fontFaceTemplate({
      format,
      family: this.opts.fontFamily,
      uri: this.getFontDataUri(format, font.content),
      weight: this.getFontWeight(filename, font),
      style: this.getFontStyle(filename, font)
    });
  };

  /**
   * Get the base64-encoded data-uri of a font
   *
   * @param {string} format The font format (woff2 or woff)
   * @param {string|Buffer} fontContent The font-file content
   * @returns {string} Base64-encoded data-uri of a font
   */
  getFontDataUri = (format, fontContent) => {
    const base64 = this.stringToBase64(fontContent);
    const mime = this.getMimeType(format);

    return this.opts.fontUriTemplate({
      format,
      mime,
      base64
    });
  };

  /**
   * Get the mime-type for a font-format
   *
   * @param {string} format The font-format (woff2 or woff)
   * @returns {string} The mime-type for a font-format
   */
  getMimeType = (format) => {
    if (!this.mimeTypes.hasOwnProperty(format)) {
      throw new Error(`${format} is not a valid format.`);
    }
    else {
      return this.mimeTypes[format];
    }
  };

  /**
   * Get the font-format from a filename
   *
   * @param {string} filename The filename
   * @returns {string} The font-format
   */
  getFontFormat = (filename) => {
    const extension = path.extname(filename);

    return extension.substring(1);
  };


  /**
   * Encode a string to base64
   *
   * @param {String} string String to encode
   * @return {String} Base64 encoded string
   */
  stringToBase64 = (string) => {
    return new Buffer(string).toString('base64');
  };

  /**
   * Get the font-weight
   * Checks if a font-weight is present in the font-object or tries to guess the font-weight from the filename.
   *
   * @param {string} filename The font filename
   * @param {Object} font The font object
   * @returns {string} The font-weight. Defaults to `normal`.
   */
  getFontWeight = (filename, font) => {
    return font.hasOwnProperty('weight') &&
    this.fontWeights.hasOwnProperty(font.weight) ? font.weight : this.getFontWeightFromFilename(filename);

  };

  /**
   * Get the font-style
   * Checks if a font-style is present in the font-object or tries to guess the font-style from the filename.
   *
   * @param {string} filename The font filename
   * @param {Object} font The font object
   * @returns {string} The font-style. Defaults to `normal`.
   */
  getFontStyle = (filename, font) => {
    return font.hasOwnProperty('style') &&
    this.fontStyles.hasOwnProperty(font.style) ? font.style : this.getFontStyleFromFilename(filename);
  };

  /**
   * Guess the font-weight from the filename
   *
   * @param {string} filename The filename
   * @returns {string} The font-weight. Defaults to `normal`.
   */
  getFontWeightFromFilename = (filename) => {
    let weight = 'normal';

    for (let fontWeight in this.fontWeights) {
      if (!this.fontWeights.hasOwnProperty(fontWeight)) {
        continue;
      }

      let regex = new RegExp(`${this.fontWeights[fontWeight]}`, 'i');
      if (regex.test(filename)) {
        weight = this.fontWeights[fontWeight];
        break;
      }
    }

    // convert `regular` to `normal` css value
    if (weight.toLowerCase() === 'regular') {
      weight = 'normal';
    }

    return weight;
  };

  /**
   * Guess the font-style from the filename
   *
   * @param {string} filename The filename
   * @returns {string} The font-style. Defaults to `normal`.
   */
  getFontStyleFromFilename = (filename) => {
    let style = 'normal';

    for (let fontStyle in this.fontStyles) {
      if (!this.fontStyles.hasOwnProperty(fontStyle)) {
        continue;
      }

      let regex = new RegExp(`${this.fontStyles[fontStyle]}`, 'i');
      if (regex.test(filename)) {
        style = this.fontStyles[fontStyle];
        break;
      }
    }

    return style;
  };
}

module.exports = Woff2Base64;
